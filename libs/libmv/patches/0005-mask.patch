--- libmv/autotrack/autotrack.cc	2017-09-13 19:35:21.000000000 +0200
+++ libmv/autotrack/autotrack.cc	2017-09-13 19:32:19.000000000 +0200
@@ -90,36 +90,67 @@
   y[4] = marker.center.y() - origin(1);
 }
 
-FrameAccessor::Key GetImageForMarker(const Marker& marker,
-                                     FrameAccessor* frame_accessor,
-                                     FloatImage** image) {
-  // TODO(sergey): Currently we pass float region to the accessor,
-  // but we don't want the accessor to decide the rounding, so we
-  // do rounding here.
-  // Ideally we would need to pass IntRegion to the frame accessor.
-  Region region = marker.search_region.Rounded();
-  libmv::scoped_ptr<FrameAccessor::Transform> transform = NULL;
-  if (marker.disabled_channels != 0) {
-    transform.reset(new DisableChannelsTransform(marker.disabled_channels));
-  }
-  return frame_accessor->GetImage(marker.clip,
-                                  marker.frame,
-                                  FrameAccessor::MONO,
-                                  0,  // No downscale for now.
-                                  &region,
-                                  transform.get(),
-                                  image);
-}
-
-FrameAccessor::Key GetMaskForMarker(const Marker& marker,
-                                    FrameAccessor* frame_accessor,
-                                    FloatImage* mask) {
-  Region region = marker.search_region.Rounded();
-  return frame_accessor->GetMaskForTrack(marker.clip,
-                                         marker.frame,
-                                         marker.track,
-                                         &region,
-                                         mask);
+struct GetImageForMarkerArgs
+{
+    const Marker* marker;
+    FrameAccessor::GetImageTypeEnum sourceType;
+    FloatImage* image;
+    FrameAccessor::Key key;
+
+    GetImageForMarkerArgs()
+    : marker(0)
+    , sourceType(FrameAccessor::eGetImageTypeSource)
+    , image(0)
+    , key(0)
+    {
+
+    }
+};
+
+void GetImageForMarker(std::list<GetImageForMarkerArgs>& args, FrameAccessor* frame_accessor) {
+
+    if (args.empty()) {
+        return;
+    }
+    std::list<FrameAccessor::GetImageArgs> accessorArgs;
+    std::vector<Region> regions(args.size());
+
+    libmv::scoped_ptr<FrameAccessor::Transform> transform = NULL;
+
+    std::size_t i = 0;
+    for (std::list<GetImageForMarkerArgs>::const_iterator it = args.begin(); it != args.end(); ++it, ++i) {
+        // TODO(sergey): Currently we pass float region to the accessor,
+        // but we don't want the accessor to decide the rounding, so we
+        // do rounding here.
+        // Ideally we would need to pass IntRegion to the frame accessor.
+        regions[i] = it->marker->search_region.Rounded();
+
+        bool needsTransform = false;
+        if (!transform.get() && it->marker->disabled_channels != 0 && it->sourceType == FrameAccessor::eGetImageTypeSource) {
+            needsTransform = true;
+            transform.reset(new DisableChannelsTransform(it->marker->disabled_channels));
+        }
+
+        FrameAccessor::GetImageArgs access;
+        access.clip = it->marker->clip;
+        access.frame = it->marker->frame;
+        access.sourceType = it->sourceType;
+        access.input_mode = FrameAccessor::MONO;
+        access.downscale = 0; // No downscale for now.
+        access.region = &regions[i];
+        access.transform = needsTransform ? transform.get() : 0;
+        access.destination = 0;
+        access.destinationKey = 0;
+        accessorArgs.push_back(access);
+    }
+    frame_accessor->GetImage(accessorArgs);
+
+    assert(args.size() == accessorArgs.size());
+    std::list<GetImageForMarkerArgs>::iterator ito = args.begin();
+    for (std::list<FrameAccessor::GetImageArgs>::iterator it = accessorArgs.begin(); it != accessorArgs.end(); ++it, ++ito) {
+        ito->image = it->destination;
+        ito->key = it->destinationKey;
+    }
 }
 
 }  // namespace
@@ -157,30 +188,63 @@
 
   // TODO(keir): Technically this could take a smaller slice from the source
   // image instead of taking one the size of the search window.
-  FloatImage* reference_image;
-  FrameAccessor::Key reference_key = GetImageForMarker(reference_marker,
-                                                       frame_accessor_,
-                                                       &reference_image);
+  std::list<GetImageForMarkerArgs> getImageArgs;
+  {
+      GetImageForMarkerArgs args;
+      args.marker = &reference_marker;
+      args.sourceType = FrameAccessor::eGetImageTypeSource;
+      getImageArgs.push_back(args);
+  }
+  {
+      GetImageForMarkerArgs args;
+      args.marker = tracked_marker;
+      args.sourceType = FrameAccessor::eGetImageTypeSource;
+      getImageArgs.push_back(args);
+  }
+  {
+      // If non-null, this is used as the pattern mask. It should match the size of
+      // image1, even though only values inside the image1 quad are examined. The
+      // values must be in the range 0.0 to 0.1.
+      GetImageForMarkerArgs args;
+      args.marker = &reference_marker;
+      args.sourceType = FrameAccessor::eGetImageTypeMask;
+      getImageArgs.push_back(args);
+  }
+
+  GetImageForMarker(getImageArgs, frame_accessor_);
+
+
+
+  FloatImage* reference_image = 0, *tracked_image = 0, *reference_mask = 0;
+  FrameAccessor::Key reference_key, tracked_key, reference_mask_key;
+  assert(getImageArgs.size() == 3);
+  {
+      std::list<GetImageForMarkerArgs>::iterator it = getImageArgs.begin();
+      reference_image = it->image;
+      reference_key = it->key;
+      ++it;
+
+      tracked_image = it->image;
+      tracked_key = it->key;
+      ++it;
+
+      reference_mask = it->image;
+      reference_mask_key = it->key;
+  }
+
   if (!reference_key) {
     LG << "Couldn't get frame for reference marker: " << reference_marker;
     return false;
   }
 
-  FloatImage reference_mask;
-  FrameAccessor::Key reference_mask_key = GetMaskForMarker(reference_marker,
-                                                           frame_accessor_,
-                                                           &reference_mask);
-
-  FloatImage* tracked_image;
-  FrameAccessor::Key tracked_key = GetImageForMarker(*tracked_marker,
-                                                     frame_accessor_,
-                                                     &tracked_image);
+
   if (!tracked_key) {
     frame_accessor_->ReleaseImage(reference_key);
     LG << "Couldn't get frame for tracked marker: " << tracked_marker;
     return false;
   }
 
+
   // Store original position befoer tracking, so we can claculate offset later.
   Vec2f original_center = tracked_marker->center;
 
@@ -191,7 +255,7 @@
   }
   if (reference_mask_key != NULL) {
     LG << "Using mask for reference marker: " << reference_marker;
-    local_track_region_options.image1_mask = &reference_mask;
+    local_track_region_options.image1_mask = reference_mask;
   }
   local_track_region_options.num_extra_points = 1;  // For center point.
   local_track_region_options.attempt_refine_before_brute = predicted_position;
@@ -220,7 +284,10 @@
   // Release the images and masks from the accessor cache.
   frame_accessor_->ReleaseImage(reference_key);
   frame_accessor_->ReleaseImage(tracked_key);
-  frame_accessor_->ReleaseMask(reference_mask_key);
+
+  if (reference_mask) {
+      frame_accessor_->ReleaseImage(reference_mask_key);
+  }
 
   // Update the kalman filter with the new measurement
   if (predictionState && result->is_usable()) {
--- libmv/autotrack/frame_accessor.h	2017-09-13 19:34:52.000000000 +0200
+++ libmv/autotrack/frame_accessor.h	2017-09-13 19:32:19.000000000 +0200
@@ -24,6 +24,7 @@
 #define LIBMV_AUTOTRACK_FRAME_ACCESSOR_H_
 
 #include <stdint.h>
+#include <list>
 
 #include "libmv/image/image.h"
 
@@ -55,8 +56,28 @@
     RGBA
   };
 
+  enum GetImageTypeEnum
+  {
+    eGetImageTypeSource,
+    eGetImageTypeMask
+  };
+
+
   typedef void* Key;
 
+  struct GetImageArgs
+  {
+      int clip;
+      int frame;
+      GetImageTypeEnum sourceType;
+      InputMode input_mode;
+      int downscale;               // Downscale by 2^downscale.
+      const Region* region;        // Get full image if NULL.
+      const Transform* transform;  // May be NULL.
+      FloatImage* destination;
+      Key destinationKey;
+  };
+
   // Get a possibly-filtered version of a frame of a video. Downscale will
   // cause the input image to get downscaled by 2^downscale for pyramid access.
   // Region is always in original-image coordinates, and describes the
@@ -64,36 +85,12 @@
   // to the image before it is returned.
   //
   // When done with an image, you must call ReleaseImage with the returned key.
-  virtual Key GetImage(int clip,
-                       int frame,
-                       InputMode input_mode,
-                       int downscale,               // Downscale by 2^downscale.
-                       const Region* region,        // Get full image if NULL.
-                       const Transform* transform,  // May be NULL.
-                       FloatImage** destination) = 0;
+  virtual void GetImage(std::list<GetImageArgs>& imageRequests) = 0;
 
   // Releases an image from the frame accessor. Non-caching implementations may
   // free the image immediately; others may hold onto the image.
   virtual void ReleaseImage(Key) = 0;
 
-  // Get mask image for the given track.
-  //
-  // Implementation of this method should sample mask associated with the track
-  // within given region to the given destination.
-  //
-  // Result is supposed to be a single channel image.
-  //
-  // If region is NULL, it it assumed to be full-frame.
-  virtual Key GetMaskForTrack(int clip,
-                              int frame,
-                              int track,
-                              const Region* region,
-                              FloatImage* destination) = 0;
-
-  // Release a specified mask.
-  //
-  // Non-caching implementation may free used memory immediately.
-  virtual void ReleaseMask(Key key) = 0;
 
   virtual bool GetClipDimensions(int clip, int* width, int* height) = 0;
   virtual int NumClips() = 0;
